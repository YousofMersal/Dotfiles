#!/usr/bin/env python3
import os
import subprocess as sp
import sys

mail = ""

# Identify Distro
osInfo = sp.Popen(["cat", "/etc/os-release"], stdout=sp.PIPE, stderr=sp.PIPE)
osResult = sp.run(["grep", "ID_LIKE="], stdin=osInfo.stdout, stdout=sp.PIPE)
distro = osResult.stdout.decode("utf-8").strip().replace("ID_LIKE=", "")
packageManagerCommand = [] 

packagedToInstall = ["zsh", "neovim", "python3-pip", "gbd", "ripgrep", "zip", "hyperfine", "cmake", "lutris", "ccls", "-y"]

if distro == "arch":
    packageManagerCommand = ["packman", "-S"]
    sp.run(["sudo", "pacman", "-Syu"])
    sp.run(["yay", "-Syu", "yadm-git", "-y"])
elif distro == "debian":
    packageManagerCommand = ["apt", "install"]
    sp.run(["sudo", "apt", "update", "-y"])
    sp.run(["sudo", "apt", "upgrade", "-y"])
    sp.run(["sudo", "apt", "install", "yadm", "-y"])
else:
    sys.exit()

def addSSHKey(mail):
    fileName = input("What should the file be called? :")
    sp.run(["ssh-keygen", "-t", "rsa", "-b", "4096", "-q", "-f", os.environ.get("HOME") + "/.ssh/" + fileName, "-N", "\"\"", "-C","\"" + mail + "\""])

isWSL = False
test = sp.run(["grep", "Microsoft", "/proc/version"], stdout=sp.PIPE, stderr=sp.PIPE)

if test.stdout:
    isWSL = True
else:
    isWSL = False

if input("Set git configs? y/n: ").lower() in ("y", "yes"):
    name = input("What name should i add to git congig?: ")
    mail = input("What mail should i add to git congig?: ")
    sp.run(["git", "config", "--global", "user.name", name])
    sp.run(["git", "config", "--global", "user.mail", mail])

addKey = False

addKey = input("Add SSH key(s)? y/n: ")

if addKey.lower() in ("y", "yes"):
    while addKey in ("y", "yes"):
        if not mail:
            mail = input("What is your mail adress?: ")
            addSSHKey(mail)
        else:
            addSSHKey(mail)

        more = input("Add more keys?: y/n: ")
        if not more.lower() in ("y", "yes"):
            addKey = "no"

sp.run(packageManagerCommand + packagedToInstall)
sp.run(["wget", "-P", "~", "https://hit.io/.gdbinit"])

if isWSL:
    it = sp.Popen(["curl", "--proto", "'=https'", "--tlsv1.2", "-sSF", "https://sh.rustup.rs",],stdout=sp.PIPE)
    sp.run(["sh", "-s", "--", "-y"], stdin=it.stdout)
else:
    it = sp.Popen(["curl", "https://sh.rustup.rs", "-sSF"], stdout=sp.PIPE)
    sp.run(["sh", "-s", "--", "-y"], stdin=it.stdout)

sp.run(["cargo", "install", "exa"])

sp.run(["sh", "-c", "'curl -fLo \"${XDG_DATA_HOME:-$HOME/.local/share}\"/nvim/site/autoload/plug.vim --create-dirs \
        https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'"])

sp.run(["pip3", "install", "pynvim"])

sp.run(["pip3", "install", "pygments"])

sp.run(["nvim", "--headless", "+'PlugInstall --sync'", "+'PlugUpdate'", "+qa"])

it = sp.Popen(["curl", "-s", "\"https://get.sdkman.io?rcupdate=false\""], stdout=sp.PIPE)
sp.run(["bash"], stdin=it.stdout)

sp.run(["source", "\"$HOME/.sdkman/bun/sdkman-init.sh\""])

sp.run(["sdk", "install", "java", "14.0.2.fx-librca"])

n = sp.Popen(["curl", "-sL", "https://git.io/n-install"], stdout=sp.PIPE)
sp.run(["bash", "-s", "--", "-q"], stdin=n.stdout)


sp.run(["yadm", "remote", "set-url", "origin", "\"git@github.com:YousofMersal/Dotfiles.git\""])
sp.run(["yadm", "pull", "origin", "master", "-f"])
sp.run(["sh", "-c", "\"$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"", "\"\"", "--unattended"], shell=True)
sp.run(["chsh", "-s", "$(which zsh)"], shell=True)
